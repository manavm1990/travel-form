{"ast":null,"code":"var _jsxFileName = \"/Users/codefinity/Code/Claim/React/travel-form/client/src/components/Form/index.js\";\nimport React, { useState } from \"react\";\nimport { Checkbox, Input, Radio } from \"./Inputs\";\nimport { Select } from \"./Select\";\nimport api from \"api\";\nexport const Form = () => {\n  const [firstName, setFirstName] = useState(\"\");\n  const [firstNameError, setFirstNameError] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [lastNameError, setLastNameError] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [destination, setDestination] = useState(\"India\");\n  const [isVegan, setIsVegan] = useState(false);\n  const [isLactoseFree, setIsLactoseFree] = useState(false);\n  const destinations = {\n    id: \"destination\",\n    options: [\"India\", \"America\", \"Australia\", \"Germany\"]\n  };\n  const dietaryRestrictions = [{\n    checked: isVegan,\n    id: \"isVegan\",\n    label: \"Vegan\",\n    type: \"checkbox\",\n    value: \"isVegan\"\n  }, {\n    checked: isLactoseFree,\n    id: \"isLactoseFree\",\n    label: \"Lactose Free\",\n    type: \"checkbox\",\n    value: \"isLactoseFree\"\n  }];\n  const genderInputs = [{\n    name: \"gender\",\n    type: \"radio\",\n    value: \"M\"\n  }, {\n    name: \"gender\",\n    type: \"radio\",\n    value: \"F\"\n  }];\n  const textInputs = [{\n    id: \"fName\",\n    placeholder: \"First Name\",\n    error: firstNameError\n  }, {\n    id: \"lName\",\n    placeholder: \"Last Name\",\n    error: lastNameError\n  }, {\n    id: \"email\",\n    placeholder: \"Email\",\n    type: \"email\",\n    error: emailError\n  }];\n  const validator = {\n    validateEmail(val) {\n      const lettersRe = new RegExp(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/gi);\n      return val && lettersRe.test(val) || \"Email is not valid!\";\n    },\n\n    validateNames(val) {\n      // Letters Only RegExp - 'start' - letters only (unlimited) - end of string\n      const lettersRe = new RegExp(/^[a-zA-Z]+$/g); // Non-empty\n\n      return val && lettersRe.test(val) || \"Name must be non-empty and letters only \";\n    }\n\n  };\n\n  const handleChange = ({\n    target: {\n      id,\n      value,\n      checked\n    }\n  }) => {\n    switch (id) {\n      case \"fName\":\n        setFirstNameError(\"\");\n\n        if (typeof validator.validateNames(value) === \"string\") {\n          setFirstNameError(validator.validateNames(value));\n        } else {\n          setFirstName(value);\n        }\n\n        break;\n\n      case \"lName\":\n        setLastNameError(\"\");\n\n        if (typeof validator.validateNames(value) === \"string\") {\n          setLastNameError(validator.validateNames(value));\n        } else {\n          setLastName(value);\n        }\n\n        break;\n\n      case \"email\":\n        setEmailError(\"\");\n\n        if (typeof validator.validateEmail(value) === \"string\") {\n          setEmailError(validator.validateEmail(value));\n        } else {\n          setEmail(value);\n        }\n\n        break;\n\n      case \"destination\":\n        setDestination(value);\n        break;\n\n      case \"isVegan\":\n        setIsVegan(checked);\n        break;\n\n      case \"isLactoseFree\":\n        setIsLactoseFree(checked);\n        break;\n      // If nothing else, must be ðŸ”˜s\n\n      default:\n        setGender(value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault(); // Don't do anything if there are any errors!\n\n    if (!firstNameError && !lastNameError && !emailError) {\n      api.addTravel({\n        firstName,\n        lastName,\n        email,\n        gender,\n        destination,\n        dietRestrictions: {\n          isVegan,\n          isLactoseFree\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"center\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, textInputs.map(({\n    id,\n    placeholder,\n    error\n  }, i) => /*#__PURE__*/React.createElement(Input, {\n    handler: handleChange,\n    id: id,\n    key: i,\n    placeholder: placeholder,\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Select, {\n    selections: destinations,\n    handler: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex--justify-space-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, genderInputs.map(({\n    name,\n    value\n  }, i) => /*#__PURE__*/React.createElement(Radio, {\n    checked: gender === value,\n    name: name,\n    value: value,\n    handler: handleChange,\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  })), dietaryRestrictions.map(({\n    checked,\n    id,\n    label,\n    value\n  }, i) => /*#__PURE__*/React.createElement(Checkbox, {\n    id: id,\n    label: label,\n    value: value,\n    handler: handleChange,\n    checked: checked,\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, \"Submit\"));\n};","map":{"version":3,"sources":["/Users/codefinity/Code/Claim/React/travel-form/client/src/components/Form/index.js"],"names":["React","useState","Checkbox","Input","Radio","Select","api","Form","firstName","setFirstName","firstNameError","setFirstNameError","lastName","setLastName","lastNameError","setLastNameError","email","setEmail","emailError","setEmailError","gender","setGender","destination","setDestination","isVegan","setIsVegan","isLactoseFree","setIsLactoseFree","destinations","id","options","dietaryRestrictions","checked","label","type","value","genderInputs","name","textInputs","placeholder","error","validator","validateEmail","val","lettersRe","RegExp","test","validateNames","handleChange","target","handleSubmit","event","preventDefault","addTravel","dietRestrictions","map","i"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\n\nimport { Checkbox, Input, Radio } from \"./Inputs\"\nimport { Select } from \"./Select\"\n\nimport api from \"api\"\n\nexport const Form = () => {\n  const [firstName, setFirstName] = useState(\"\")\n  const [firstNameError, setFirstNameError] = useState(\"\")\n  const [lastName, setLastName] = useState(\"\")\n  const [lastNameError, setLastNameError] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [emailError, setEmailError] = useState(\"\")\n  const [gender, setGender] = useState(\"\")\n  const [destination, setDestination] = useState(\"India\")\n  const [isVegan, setIsVegan] = useState(false)\n  const [isLactoseFree, setIsLactoseFree] = useState(false)\n\n  const destinations = {\n    id: \"destination\",\n    options: [\"India\", \"America\", \"Australia\", \"Germany\"],\n  }\n\n  const dietaryRestrictions = [\n    {\n      checked: isVegan,\n      id: \"isVegan\",\n      label: \"Vegan\",\n      type: \"checkbox\",\n      value: \"isVegan\",\n    },\n    {\n      checked: isLactoseFree,\n      id: \"isLactoseFree\",\n      label: \"Lactose Free\",\n      type: \"checkbox\",\n      value: \"isLactoseFree\",\n    },\n  ]\n\n  const genderInputs = [\n    {\n      name: \"gender\",\n      type: \"radio\",\n      value: \"M\",\n    },\n    {\n      name: \"gender\",\n      type: \"radio\",\n      value: \"F\",\n    },\n  ]\n\n  const textInputs = [\n    {\n      id: \"fName\",\n      placeholder: \"First Name\",\n      error: firstNameError,\n    },\n    {\n      id: \"lName\",\n      placeholder: \"Last Name\",\n      error: lastNameError,\n    },\n    {\n      id: \"email\",\n      placeholder: \"Email\",\n      type: \"email\",\n      error: emailError,\n    },\n  ]\n\n  const validator = {\n    validateEmail(val) {\n      const lettersRe = new RegExp(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/gi)\n      return (val && lettersRe.test(val)) || \"Email is not valid!\"\n    },\n    validateNames(val) {\n      // Letters Only RegExp - 'start' - letters only (unlimited) - end of string\n      const lettersRe = new RegExp(/^[a-zA-Z]+$/g)\n      // Non-empty\n      return (\n        (val && lettersRe.test(val)) ||\n        \"Name must be non-empty and letters only \"\n      )\n    },\n  }\n\n  const handleChange = ({ target: { id, value, checked } }) => {\n    switch (id) {\n      case \"fName\":\n        setFirstNameError(\"\")\n        if (typeof validator.validateNames(value) === \"string\") {\n          setFirstNameError(validator.validateNames(value))\n        } else {\n          setFirstName(value)\n        }\n        break\n      case \"lName\":\n        setLastNameError(\"\")\n        if (typeof validator.validateNames(value) === \"string\") {\n          setLastNameError(validator.validateNames(value))\n        } else {\n          setLastName(value)\n        }\n        break\n      case \"email\":\n        setEmailError(\"\")\n        if (typeof validator.validateEmail(value) === \"string\") {\n          setEmailError(validator.validateEmail(value))\n        } else {\n          setEmail(value)\n        }\n        break\n      case \"destination\":\n        setDestination(value)\n        break\n      case \"isVegan\":\n        setIsVegan(checked)\n        break\n      case \"isLactoseFree\":\n        setIsLactoseFree(checked)\n        break\n      // If nothing else, must be ðŸ”˜s\n      default:\n        setGender(value)\n    }\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    // Don't do anything if there are any errors!\n    if (!firstNameError && !lastNameError && !emailError) {\n      api.addTravel({\n        firstName,\n        lastName,\n        email,\n        gender,\n        destination,\n        dietRestrictions: { isVegan, isLactoseFree },\n      })\n    }\n  }\n\n  return (\n    <form className=\"center\" onSubmit={handleSubmit}>\n      <div className=\"grid mt-3\">\n        {textInputs.map(({ id, placeholder, error }, i) => (\n          <Input\n            handler={handleChange}\n            id={id}\n            key={i}\n            placeholder={placeholder}\n            error={error}\n          />\n        ))}\n        <Select selections={destinations} handler={handleChange} />\n      </div>\n\n      <div className=\"flex flex--justify-space-around\">\n        {genderInputs.map(({ name, value }, i) => (\n          <Radio\n            checked={gender === value}\n            name={name}\n            value={value}\n            handler={handleChange}\n            key={i}\n          />\n        ))}\n\n        {dietaryRestrictions.map(({ checked, id, label, value }, i) => (\n          <Checkbox\n            id={id}\n            label={label}\n            value={value}\n            handler={handleChange}\n            checked={checked}\n            key={i}\n          />\n        ))}\n      </div>\n\n      <button className=\"button mt-3\">Submit</button>\n    </form>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}